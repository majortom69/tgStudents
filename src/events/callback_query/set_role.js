const { updateUserRole, isUserTeacher } = require('../../database')

module.exports = {
    callbackData: 'set_role',
    execute: async (bot, callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;

        let role;

        await isUserTeacher(chatId) ? role = 'student' : role = 'teacher';
        
        if(role === 'student') {
            updateUserRole(chatId, 'student');
            bot.sendMessage(chatId, 'üéâ–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ!üéâ');
        } else {
            bot.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: [] }
            }).then(() => {
                bot.once('message', async (msg) => {
                    const password = msg.text;
                    if(password === '123') {
                        updateUserRole(chatId, 'teacher');
                        bot.sendMessage(chatId, 'üéâ–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ!üéâ');
                    } else {
                        bot.sendMessage(chatId, '‚ö†Ô∏è–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π!‚ö†Ô∏è');
                        return;
                    }
                });
            });
        }
    }
}
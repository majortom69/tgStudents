const path = require('path');
const { isUserTeacher } = require('../database');

module.exports = {
    pattern: /\/search/,
    execute: async (bot, msg) => {
        const chatId = msg.chat.id;
        delete userStates[chatId];
        const isTeacher = await isUserTeacher(chatId);
        if(!isTeacher) {
            bot.sendMessage(chatId, 'üö®–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!üö®');
            const animationPath = path.resolve(__dirname, '..', 'animations', 'ezgif.com-video-to-gif-converter.gif');
            bot.sendAnimation(chatId, animationPath).catch(err => {
                console.error('Failed to send animation:', err);
            });
            return
        }

        const options = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üó£Ô∏è–í—ã–≤–æ–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ - IDüó£Ô∏è', callback_data: 'search_id' }],
                    [{ text: 'üë•–í—ã–≤–æ–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥—Ä—É–ø–ø—ã - Groupüë•', callback_data: 'search_group' }],
                    [{ text: 'üîé–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ IDüîé', callback_data: 'search_ach_id' }]
                ]
            }
        };

        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:', options);
    }
}
module.exports = {
    type: 'callback_query',
    execute: (bot, callbackQuery) => {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const data = callbackQuery.data;

        // Handle callback query logic here
        if (data === 'cancel') {
            delete userStates[chatId];
            bot.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: [] }
            }).catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            });
            return;
        }

        if (data === 'scientific' || data === 'sport' || data === 'cultural' || data === 'other') {
            userStates[chatId] = { step: 'awaiting_title', category: data };
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_title' }]
                    ]
                }
            };
            bot.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).then(() => {
                userStates[chatId].lastMessageId = messageId;
            });
        } else if (data === 'back_title') {
            userStates[chatId] = {};
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üß¨–ù–∞—É—á–Ω–æ–µüß¨', callback_data: 'scientific' }],
                        [{ text: 'üèÜ–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µüèÜ', callback_data: 'sport' }],
                        [{ text: 'üé≠–ö—É–ª—å—Ç—É—Ä–Ω–∞—èüé≠', callback_data: 'cultural' }],
                        [{ text: '‚ùì–î—Ä—É–≥–æ–µ‚ùì', callback_data: 'other' }],
                        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
                    ]
                }
            };
            bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            });
        }

        if (data === 'student') {
            userStates[chatId] = { step: 'awaiting_name', role: data };
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
                    ]
                }
            };
            bot.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).then(() => {
                userStates[chatId].lastMessageId = messageId;
            });
        } else if (data === 'teacher') {
            userStates[chatId] = { step: 'awaiting_password', role: data };
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
                    ]
                }
            };
            bot.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).then(() => {
                userStates[chatId].lastMessageId = messageId;
            });
        } else if (data === 'back') {
            userStates[chatId] = {};
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–°—Ç—É–¥–µ–Ω—Ç', callback_data: 'student' }],
                        [{ text: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', callback_data: 'teacher' }]
                    ]
                }
            };
            bot.editMessageText('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            });
        }
    }
};

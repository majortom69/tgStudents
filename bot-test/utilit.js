const { getUserAchievements, addAttachments, isUserTeacher, getGroupAchievements, getAchievementById, getUsernameByUserId, getStudentGroupByUserId } = require('./database');
const fs = require('fs');
const path = require('path');
const { token } = require('./bot');
const { promisify } = require('util');
const { pipeline } = require('stream');

const pipelineAsync = promisify(pipeline);

async function formatAchievementMessage(achievement) {
    const name = await getUsernameByUserId(achievement.USER_ID);
    const group = await getStudentGroupByUserId(achievement.USER_ID);
    let message = `${name}\n`;
    message += `–ì—Ä—É–ø–ø–∞: ${group}\n\n`;
    message += `–ù–∞–∑–≤–∞–Ω–∏–µ: ${achievement.TITLE}\n`;
    message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${achievement.DESCRIPTION}\n`;
    //message += `Date: ${achievement.ACHIEVEMENT_DATE}\n`;
    message += `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${achievement.CATEGORY}\n`;
    message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ${achievement.COMMENT}\n`;
    message += `–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${achievement.ATTACHMENTS.length}\n`;

    return message;
}

async function handleImageMessage(bot, msg, userState, currentAchievement) {
    const chatId = msg.chat.id;
    const uploadsDir = './uploads';

    const processImage = async (fileId, chatId, mediaGroupId) => {
        bot.getFile(fileId).then(file => {
            const filePath = file.file_path;
            const url = `https://api.telegram.org/file/bot${token}/${filePath}`;

            fetch(url)
                .then(async res => {
                    const uniqueFilename = `${Date.now()}-${path.basename(filePath)}`;
                    const dest = fs.createWriteStream(path.join(uploadsDir, uniqueFilename));
                    try {
                        await pipelineAsync(res.body, dest);
                        userState[chatId].images.push(path.join(uploadsDir, uniqueFilename));
                        if (!userState[chatId].messageSent) {
                            bot.sendMessage(chatId, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
                            userState[chatId].messageSent = true;
                        }
                    } catch (err) {
                        console.error(err);
                        bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
                    }
                })
                .catch(err => {
                    console.error(err);
                    bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
                });
        });
    };

    
    if ((msg.media_group_id || msg.photo) && msg.photo) {
        if (!userState[chatId]) {
            userState[chatId] = { images: [], messageSent: false };
        }
        const fileId = msg.photo[msg.photo.length - 1].file_id;
        await processImage(fileId, chatId, msg.media_group_id);
    } else if (msg.text === '/done') {
        if (userState[chatId] && userState[chatId].images.length > 0) {

            currentAchievement.imagePaths = userState[chatId].images
            console.log('Achievement:', achievement);

            bot.sendMessage(chatId, '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            addAttachments(currentAchievement, currentAchievement.ACHIEVEMENT_ID);

            // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            delete userState[chatId];
        } else {
            bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.');
        }
    }
}


function sendUploadButtons(bot, chatId) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üß¨–ù–∞—É—á–Ω–æ–µüß¨', callback_data: 'scientific' }],
                [{ text: 'üèÜ–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µüèÜ', callback_data: 'sports' }],
                [{ text: 'üé≠–ö—É–ª—å—Ç—É—Ä–Ω–∞—èüé≠', callback_data: 'cultural' }],
                [{ text: '‚ùì–î—Ä—É–≥–æ–µ‚ùì', callback_data: 'other' }],
                [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
            ]
        }
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', options);
}

async function sendAchievementPage(bot, chatId, userId, page, messageId = null) {
    const achievements = await getUserAchievements(userId);
    const isTeacher = await isUserTeacher(chatId);
    await sendPage(bot, chatId, achievements, page, messageId, isTeacher, false);
}

async function sendAchievementPageByGroupId(bot, chatId, groupId, page, messageId = null) {
    const achievements = await getGroupAchievements(groupId);
    const isTeacher = await isUserTeacher(chatId);
    await sendPage(bot, chatId, achievements, page, messageId, isTeacher, false);
}

async function sendAchievementPageByAchId(bot, chatId, achId, page, messageId = null) {
    const achievements = await getAchievementById(achId);
    const isTeacher = await isUserTeacher(chatId);
    await sendPage(bot, chatId, achievements, page, messageId, isTeacher, true);
}

async function sendPage(bot, chatId, achievements, page, messageId, isTeacher, achId) {
    const pageSize = 1; // Number of achievements per page

    if (!Array.isArray(achievements)) {
        achievements = [achievements];
    }

    const totalPages = Math.ceil(achievements.length / pageSize);

    // Ensure the page is within bounds
    if (page < 1) page = 1;
    if (page > totalPages) page = totalPages;

    const startIndex = (page - 1) * pageSize;
    const endIndex = Math.min(startIndex + pageSize, achievements.length);
    const currentAchievements = achievements.slice(startIndex, endIndex);

    let message = `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${totalPages}):\n\n`;
    for (let achievement of currentAchievements) {
        message += await formatAchievementMessage(achievement);
        message += '\n';
    }

    const inlineKeyboard = {
        inline_keyboard: [
            [
                ...(achId ? [] : [{ text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'prev' }]),
                { text: 'üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è', callback_data: 'send_attachment' },
                ...(achId ? [] : [{ text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ', callback_data: 'next' }])
            ],
            [
                { text: isTeacher ? 'üìù –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å' : 'üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: isTeacher ? 'comment' : 'edit' },
                { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: 'delete' }
            ]
        ]
    };
    

    if (messageId) {
        bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: inlineKeyboard
        }).catch((error) => {
            if (error.response && error.response.body && error.response.body.error_code === 400 && error.response.body.description.includes('message is not modified')) {
                console.log('Message not modified, skipping update.');
            } else {
                console.error('Failed to edit message:', error);
            }
        });
    } else {
        bot.sendMessage(chatId, message, { reply_markup: inlineKeyboard });
    }
}

module.exports = { formatAchievementMessage, sendAchievementPage, sendAchievementPageByGroupId, sendAchievementPageByAchId, sendUploadButtons, handleImageMessage };

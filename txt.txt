using System;
using System.Diagnostics;
using System.IO;
using System.Windows;

namespace OpenVpnClient
{
    public partial class MainWindow : Window
    {
        private Process _openVpnProcess;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void ConnectButton_Click(object sender, RoutedEventArgs e)
        {
            if (_openVpnProcess == null || _openVpnProcess.HasExited)
            {
                StartVpn();
            }
            else
            {
                StopVpn();
            }
        }

        private void StartVpn()
        {
            string serverIp = ServerIpTextBox.Text;

            // Path to your .ovpn file
            string configPath = "path_to_your_ovpn_file.ovpn"; // Adjust the path accordingly
            if (!File.Exists(configPath))
            {
                LogTextBox.AppendText("Config file not found.\n");
                return;
            }

            // Prepare the process start info
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "openvpn",
                Arguments = $"--config \"{configPath}\"",
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            // Start the process
            _openVpnProcess = new Process { StartInfo = startInfo };
            _openVpnProcess.OutputDataReceived += (sender, args) => LogTextBox.Dispatcher.Invoke(() => LogTextBox.AppendText(args.Data + "\n"));
            _openVpnProcess.ErrorDataReceived += (sender, args) => LogTextBox.Dispatcher.Invoke(() => LogTextBox.AppendText("ERROR: " + args.Data + "\n"));

            try
            {
                _openVpnProcess.Start();
                _openVpnProcess.BeginOutputReadLine();
                _openVpnProcess.BeginErrorReadLine();
                ConnectButton.Content = "Disconnect";
            }
            catch (Exception ex)
            {
                LogTextBox.AppendText($"Failed to start OpenVPN: {ex.Message}\n");
            }
        }

        private void StopVpn()
        {
            if (_openVpnProcess != null && !_openVpnProcess.HasExited)
            {
                try
                {
                    _openVpnProcess.Kill();
                    _openVpnProcess.WaitForExit();
                    LogTextBox.AppendText("VPN Disconnected.\n");
                }
                catch (Exception ex)
                {
                    LogTextBox.AppendText($"Failed to stop OpenVPN: {ex.Message}\n");
                }
                finally
                {
                    _openVpnProcess.Dispose();
                    _openVpnProcess = null;
                    ConnectButton.Content = "Connect";
                }
            }
        }
    }
}
